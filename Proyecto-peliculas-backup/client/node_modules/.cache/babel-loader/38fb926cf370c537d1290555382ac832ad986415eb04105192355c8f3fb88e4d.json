{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\nconst movieService = {\n  // Obtener películas populares\n  getPopularMovies: async (page = 1) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/movies/popular`, {\n        params: {\n          page\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching popular movies:', error);\n      throw error;\n    }\n  },\n  // Buscar películas\n  searchMovies: async (query = '', genres = [], page = 1) => {\n    try {\n      const params = new URLSearchParams();\n      if (query) params.append('query', query);\n      if (genres.length > 0) params.append('genres', genres.join(','));\n      params.append('page', page);\n      const response = await axios.get(`${BASE_URL}/movies/search?${params.toString()}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error searching movies:', error);\n      throw error;\n    }\n  },\n  // Obtener detalles de película\n  getMovieDetails: async movieId => {\n    try {\n      const response = await axios.get(`${BASE_URL}/movies/${movieId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching movie details:', error);\n      throw error;\n    }\n  },\n  // Guardar película\n  saveMovie: async movieId => {\n    try {\n      const response = await axios.post(`${BASE_URL}/movies/save`, {\n        tmdb_id: movieId\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error saving movie:', error);\n      throw error;\n    }\n  },\n  // Obtener películas guardadas\n  getSavedMovies: async () => {\n    try {\n      const response = await axios.get(`${BASE_URL}/movies/saved`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching saved movies:', error);\n      throw error;\n    }\n  },\n  // Obtener géneros\n  getGenres: async () => {\n    try {\n      const response = await axios.get(`${BASE_URL}/movies/genres`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching genres:', error);\n      throw error;\n    }\n  }\n};\nexport default movieService;","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_API_URL","movieService","getPopularMovies","page","response","get","params","data","error","console","searchMovies","query","genres","URLSearchParams","append","length","join","toString","getMovieDetails","movieId","saveMovie","post","tmdb_id","getSavedMovies","getGenres"],"sources":["C:/Proyecto-peliculas/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\r\n\r\nconst movieService = {\r\n    // Obtener películas populares\r\n    getPopularMovies: async (page = 1) => {\r\n        try {\r\n            const response = await axios.get(`${BASE_URL}/movies/popular`, {\r\n                params: { page }\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching popular movies:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Buscar películas\r\n    searchMovies: async (query = '', genres = [], page = 1) => {\r\n        try {\r\n            const params = new URLSearchParams();\r\n            if (query) params.append('query', query);\r\n            if (genres.length > 0) params.append('genres', genres.join(','));\r\n            params.append('page', page);\r\n\r\n            const response = await axios.get(`${BASE_URL}/movies/search?${params.toString()}`);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error searching movies:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Obtener detalles de película\r\n    getMovieDetails: async (movieId) => {\r\n        try {\r\n            const response = await axios.get(`${BASE_URL}/movies/${movieId}`);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching movie details:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Guardar película\r\n    saveMovie: async (movieId) => {\r\n        try {\r\n            const response = await axios.post(`${BASE_URL}/movies/save`, { tmdb_id: movieId });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error saving movie:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Obtener películas guardadas\r\n    getSavedMovies: async () => {\r\n        try {\r\n            const response = await axios.get(`${BASE_URL}/movies/saved`);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching saved movies:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Obtener géneros\r\n    getGenres: async () => {\r\n        try {\r\n            const response = await axios.get(`${BASE_URL}/movies/genres`);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching genres:', error);\r\n            throw error;\r\n        }\r\n    }\r\n};\r\n\r\nexport default movieService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}